stages:
  - build

image: debian:latest

before_script:
  ##g++
  - apt-get update -qq && apt-get install -y g++ build-essential  doxygen graphviz  git
  - g++ --version
  - which g++
  ##git
  - git config --global user.email "$GITLAB_USER_EMAIL"
  - git config --global user.name  "$GITLAB_USER_NAME"
  ##boost
  - apt-get install -y libboost-dev
  ##CImg
#  - apt-get install -y cimg-dev cimg-doc cimg-examples #libxrandr-dev
  ##NetCDF
  - apt-get install -y netcdf-bin libnetcdf-cxx-legacy-dev
  - find / 2>/dev/null | grep -e libnetcdf.a -e libnetcdf.so -e libnetcdf_c++.a -e libnetcdf_c++.so
  ##docker container
#  - printenv

udp:
  stage: build
  script:
  ##docker container
  - uname -m
  - uname -m > ARCH.txt
  - uname --kernel-release
  ##imported repository
  - cd $CI_PROJECT_DIR
#temporary
  - ./ci-temporary.sh

  ##make all e.g. bin, doc, run, ...
  - rm VERSION*
  - make udp_receive
  - ls *

  artifacts:
    expose_as: 'built in container'
    paths:
    - ARCH.txt
    - VERSION
    - VERSIONS
    - udp_receive_help.output

doc:
  stage: build
  script:
  ##docker container
  - uname -m
  - uname -m > ARCH.txt
  ##imported repository
  - cd $CI_PROJECT_DIR
#temporary
  - ./ci-temporary.sh

  ##make all e.g. bin, doc, run, ...
#  - make doc
  - ./doxygen.sh
  - ls doc
  - ls doc/html

  artifacts:
    expose_as: 'built in container'
    paths:
    - ARCH.txt
    - VERSION
    - VERSIONS
    - udp_receive_help.output
    - doc/html

